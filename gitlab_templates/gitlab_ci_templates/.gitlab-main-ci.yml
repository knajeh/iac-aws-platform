default: 
  image: 
    name: ghcr.io/mojaloop/iac-aws-platform:$PLATFORM_IAC_IMAGE_VERSION
  before_script:
    - "which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )"
    - export BUCKET=$(grep bucket backend.hcl | cut -f2 -d '=' | tr -d '"' | xargs)
    - export TF_VAR_bucket=$(grep bucket backend.hcl | cut -f2 -d '=' | tr -d '"' | xargs)
    - aws s3 sync s3://$BUCKET/bootstrap ./k8ss3bootstrap/ --sse || true
    - export CI_IMAGE_PROJECT_DIR=/iac-run-dir
    # Define the contents of the workbench-config file as environment variables for use in gitlab and optionally in terraform
    - for var in $(jq -r 'to_entries[] | "\(.key)=\(.value)\n"' ./workbench-config.json); do export $var; done
    - for var in $(jq -r 'to_entries[] | "TF_VAR_\(.key)=\(.value)\n"' ./workbench-config.json); do export $var; done
    - export ENVIRONMENT=$environment
    - test -n "$BUCKET"
    - cd $CI_IMAGE_PROJECT_DIR
    - aws s3 sync s3://${BUCKET}/${environment}/ . --sse || true
    - eval `ssh-agent`
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - test -f terraform/ssh_provisioner_key &&  chmod 0600 terraform/ssh_provisioner_key &&  ssh-add terraform/ssh_provisioner_key
    - chmod +x ./searchandreplace.sh
    - if [ -d ${CI_PROJECT_DIR}/iac-sync-dir ]; then cp -r ${CI_PROJECT_DIR}/iac-sync-dir/. .; else echo "no local files to copy"; fi 
    - cp $CI_PROJECT_DIR/workbench-config.json .
    - ./searchandreplace.sh
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
    - export ANSIBLE_FEATURE_TOGGLES="-e kube_version=v${k8s_api_version} -e dashboard_enabled=True -e kube_proxy_mode=iptables -e artifacts_dir=inventory/artifacts/cluster -e cloud_provider=aws -e ansible_user=ubuntu -b --become-user=root --flush-cache -e kubeconfig_localhost=true"

variables:
  GIT_SSL_NO_VERIFY: "overwritten"
  PLATFORM_IAC_IMAGE_VERSION: "overwritten"
  K3S_IAC_IMAGE_VERSION: "overwritten"

stages:
  - Validate
  - Destroy
  - "Deploy AWS infrastructure"
  - "Run Kubespray"
  - "Run k3s"
  - "Deploy Base Platform"
  - "Deploy Platform"
  - "Run Tests"
  - "Maintain Platform"
  - "Deploy All"

Validate and Plan:
  stage: Validate
  script:
    - cd $CI_IMAGE_PROJECT_DIR/terraform
    - terraform init -backend-config ${CI_PROJECT_DIR}/backend.hcl
    - terraform validate
    - terraform plan -out=plan.cache
    - terraform show -json plan.cache | jq -r '([.resource_changes[]?.change.actions?]|flatten)|{"create":(map(select(.=="create"))|length),"update":(map(select(.=="update"))|length),"delete":(map(select(.=="delete"))|length)}' > ${CI_PROJECT_DIR}/plan.json
  artifacts:
    reports:
      terraform: plan.json
  when: manual

Destroy AWS:
  stage: Destroy
  script:
    - cd $CI_IMAGE_PROJECT_DIR/terraform
    - aws s3 sync s3://${BUCKET}/${environment}/terraform/oauth-apps/ ./oauth-apps/ || true
    - terraform init -backend-config ${CI_PROJECT_DIR}/backend.hcl
    - terraform validate
    - terraform destroy -auto-approve -refresh=false
  when: manual

Destroy Mojaloop K8s Stack:
  stage: Destroy
  script:
    - cd $CI_IMAGE_PROJECT_DIR/terraform/apps/wso2/config
    - terraform init -backend-config ${CI_PROJECT_DIR}/backend.hcl
    - terraform validate
    - terraform destroy -auto-approve -var="project_root_path=$CI_IMAGE_PROJECT_DIR" || true
    - cd $CI_IMAGE_PROJECT_DIR/terraform/k8s-setup/mojaloop-roles
    - terraform init -backend-config ${CI_PROJECT_DIR}/backend.hcl
    - terraform validate
    - terraform destroy -auto-approve -var="project_root_path=$CI_IMAGE_PROJECT_DIR" || true
    - cd $CI_IMAGE_PROJECT_DIR/terraform/k8s-setup
    - terraform init -backend-config ${CI_PROJECT_DIR}/backend.hcl
    - terraform validate
    - terraform destroy -auto-approve -var="project_root_path=$CI_IMAGE_PROJECT_DIR" || true
    #- kubectl --kubeconfig=../../admin-gateway.conf delete namespace mojaloop || true

  when: manual

Destroy Add-On Apps:
  stage: Destroy
  script:
    - aws s3 sync s3://${BUCKET}/${environment}/k3saddons/pm4ml-certoutput/ terraform/k8s-setup/addons/pm4ml-certoutput
    - aws s3 sync s3://${client}${environment}k3s-pm4mladdons-state/k3s ./k3sstate --sse || true
    - cp $CI_PROJECT_DIR/ext-pm4ml-certs.yaml terraform/k8s-setup/addons || true
    - for var in $(jq -r '.internal_pm4ml_configs | to_entries[] .value.DFSP_NAME' ./workbench-config.json); do touch terraform/k8s-setup/addons/pm4ml-certoutput/$var-client-key.pem terraform/k8s-setup/addons/pm4ml-certoutput/$var-ca-cert.pem terraform/k8s-setup/addons/pm4ml-certoutput/$var-client-cert.pem; done
    - cd $CI_IMAGE_PROJECT_DIR/terraform/k8s-setup/addons
    - terraform init -backend-config ${CI_PROJECT_DIR}/backend.hcl
    - terraform validate
    - terraform destroy -auto-approve -var="project_root_path=$CI_IMAGE_PROJECT_DIR"
    - aws s3 rm --recursive s3://$BUCKET/$environment/k8s-cluster
    - aws s3 rm s3://$BUCKET/$environment/k3saddons/onboarding_pm4ml_output.json
    - aws s3 rm s3://$BUCKET/$environment/k3saddons/ansible_pm4ml_output.yaml
  when: manual

Destroy of Internal PM4MLs Setup:
  stage: Destroy
  script:
    - cd $CI_IMAGE_PROJECT_DIR/terraform/k8s-setup/pm4mls
    - terraform init -backend-config ${CI_PROJECT_DIR}/backend.hcl
    - terraform validate
    - terraform destroy -auto-approve -var="project_root_path=$CI_IMAGE_PROJECT_DIR"
    - aws s3 rm s3://$BUCKET/$environment/k3saddons/ansible_internal_pm4ml_output.json
    - aws s3 rm s3://$BUCKET/$environment/k3saddons/onboarding_internal_pm4ml_output.json
    - aws s3 rm s3://$BUCKET/$environment/k3saddons/ansible_external_pm4ml_output.yaml
  when: manual

Destroy Vault:
  stage: Destroy
  script:
    - cd $CI_IMAGE_PROJECT_DIR/terraform/k8s-setup/vault-deploy
    - terraform init -backend-config ${CI_PROJECT_DIR}/backend.hcl
    - terraform validate
    - terraform destroy -auto-approve -var="aws_secret_key=$AWS_SECRET_ACCESS_KEY" -var="aws_access_key=$AWS_ACCESS_KEY_ID" -var="project_root_path=$CI_IMAGE_PROJECT_DIR"
  when: manual

Destroy Support Services:
  stage: Destroy
  script:
    - cd $CI_IMAGE_PROJECT_DIR/terraform/k8s-setup/support-svcs
    - aws s3 sync s3://${BUCKET}/${environment}/terraform/oauth-apps/ ./oauth-apps/ || true
    - terraform init -backend-config ${CI_PROJECT_DIR}/backend.hcl
    - terraform validate
    - terraform destroy -auto-approve -var="project_root_path=$CI_IMAGE_PROJECT_DIR"
    ##kill force kill efs provsioner
    - kubectl --kubeconfig=../../../admin-gateway.conf delete pods --all -n wso2 --grace-period=0 --force
    - kubectl --kubeconfig=../../../admin-gateway.conf delete namespace wso2 || true
    ##kill force wso2-bizops
    - kubectl --kubeconfig=../../../admin-gateway.conf delete pods --all -n wso2-bizops --grace-period=0 --force
    - kubectl --kubeconfig=../../../admin-gateway.conf delete namespace wso2-bizops || true
  when: manual

Destroy Stateful Services:
  stage: Destroy
  script:
    - cd $CI_IMAGE_PROJECT_DIR/terraform/k8s-setup/state-setup
    - terraform init -backend-config ${CI_PROJECT_DIR}/backend.hcl
    - terraform validate
    - terraform destroy -auto-approve -var="project_root_path=$CI_IMAGE_PROJECT_DIR" || true
  when: manual

Destroy Environment:
  stage: Destroy
  script:
    - aws s3 sync s3://${BUCKET}/${environment}/k3saddons/pm4ml-certoutput/ terraform/k8s-setup/addons/pm4ml-certoutput
    - aws s3 sync s3://${client}${environment}k3s-pm4mladdons-state/k3s ./k3sstate --sse || true
    - aws s3 sync s3://${BUCKET}/${environment}/terraform/oauth-apps/ ./oauth-apps/ || true
    - for var in $(jq -r '.internal_pm4ml_configs | to_entries[] .value.DFSP_NAME' ./workbench-config.json); do touch terraform/k8s-setup/addons/pm4ml-certoutput/$var-client-key.pem terraform/k8s-setup/addons/pm4ml-certoutput/$var-ca-cert.pem terraform/k8s-setup/addons/pm4ml-certoutput/$var-client-cert.pem; done
    - cp $CI_PROJECT_DIR/ext-pm4ml-certs.yaml terraform/k8s-setup/addons || true
    - cp $CI_PROJECT_DIR/teardown.sh $CI_IMAGE_PROJECT_DIR/teardown.sh || true
    - $CI_IMAGE_PROJECT_DIR/teardown.sh
  when: manual

Destroy k3s Cluster:
  stage: "Destroy"  
  image: 
    name: ghcr.io/pm4ml/k3sbootstrap:$K3S_IAC_IMAGE_VERSION
  before_script:
    - export BUCKET=$(grep bucket backend.hcl | cut -f2 -d '=' | tr -d '"' | xargs)
    - export TF_VAR_bucket=$(grep bucket backend.hcl | cut -f2 -d '=' | tr -d '"')
    - aws s3 sync s3://$BUCKET/bootstrap ./k8ss3bootstrap/ --sse || true
    - export CI_IMAGE_PROJECT_DIR=/k3s-boot
    - export peer_vpc_id=$(terraform output -state=k8ss3bootstrap/terraform.tfstate vpc_id | tr -d '"')
    - for var in $(jq -r 'to_entries[] | "\(.key)=\(.value)\n"' ./workbench-config.json); do export $var; done
    - for var in $(jq -r 'to_entries[] | "TF_VAR_\(.key)=\(.value)\n"' ./workbench-config.json); do export $var; done
    - sed -i "s/##accesskeyid##/${AWS_ACCESS_KEY_ID}/g" $CI_IMAGE_PROJECT_DIR/aws_conf
    - sed -i "s|##accesssecret##|${AWS_SECRET_ACCESS_KEY}|g" $CI_IMAGE_PROJECT_DIR/aws_conf
    - sed -i "s/##region##/${region}/g" $CI_IMAGE_PROJECT_DIR/aws_conf
    - mkdir -p ~/.aws && cp $CI_IMAGE_PROJECT_DIR/aws_conf ~/.aws/credentials
    - "which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )"
    - eval `ssh-agent`
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
    - if [ -d ./k3s-sync-dir ]; then cp -r ./k3s-sync-dir/. /k3s-boot; else echo "not local files to copy"; fi 
    - aws s3 sync s3://$BUCKET/$environment ./k8ss3/ --sse || true
    - export domain=$(terraform output -state=k8ss3/terraform.tfstate public_subdomain | tr -d '"')

  script:
    - export
    - cd /k3s-boot
    - sed -i "s/##client##/${client}/g" .env
    - sed -i "s/##domain##/${domain}/g" .env
    - sed -i "s/##environment##/${environment}/g" .env
    - sed -i "s/##region##/${region}/g" .env
    - make backend -- -auto-approve || true
    - make destroy -- -auto-approve || true 
    - aws s3 rm --recursive s3://$BUCKET/$environment/k3saddons || true 
    - aws s3 rm --recursive s3://${client}${environment}k3s-pm4mladdons-state/k3s || true
    - $CI_IMAGE_PROJECT_DIR/delete_int_k3s_db_row.sh ${client}${environment}k3s-pm4mladdons-lock ${client}${environment}k3s-pm4mladdons-state/k3s $region
  when: manual

Undeploy PM4ML Charts:
  stage: "Destroy"  
  image: 
    name: ghcr.io/pm4ml/k3sbootstrap:$K3S_IAC_IMAGE_VERSION
  before_script:
    - export BUCKET=$(grep bucket backend.hcl | cut -f2 -d '=' | tr -d '"' | xargs)
    - export TF_VAR_bucket=$(grep bucket backend.hcl | cut -f2 -d '=' | tr -d '"' | xargs)
    - aws s3 sync s3://$BUCKET/bootstrap ./k8ss3bootstrap/ --sse || true
    - export CI_IMAGE_PROJECT_DIR=/k3s-boot
    - export peer_vpc_id=$(terraform output -state=k8ss3bootstrap/terraform.tfstate vpc_id | tr -d '"')
    - for var in $(jq -r 'to_entries[] | "\(.key)=\(.value)\n"' ./workbench-config.json); do export $var; done
    - for var in $(jq -r 'to_entries[] | "TF_VAR_\(.key)=\(.value)\n"' ./workbench-config.json); do export $var; done
    - sed -i "s/##accesskeyid##/${AWS_ACCESS_KEY_ID}/g" $CI_IMAGE_PROJECT_DIR/aws_conf
    - sed -i "s|##accesssecret##|${AWS_SECRET_ACCESS_KEY}|g" $CI_IMAGE_PROJECT_DIR/aws_conf
    - sed -i "s/##region##/${region}/g" $CI_IMAGE_PROJECT_DIR/aws_conf
    - mkdir -p ~/.aws && cp $CI_IMAGE_PROJECT_DIR/aws_conf ~/.aws/credentials
    - "which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )"
    - eval `ssh-agent`
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
    - if [ -d ./k3s-sync-dir ]; then cp -r ./k3s-sync-dir/. /k3s-boot; else echo "not local files to copy"; fi 
    - aws s3 sync s3://$BUCKET/$environment ./k8ss3/ --sse || true
    - export domain=$(terraform output -state=k8ss3/terraform.tfstate public_subdomain | tr -d '"')

  script:
    - aws s3 cp s3://$BUCKET/$environment/k3saddons/ssh-key /k3s-boot/ssh-key --sse
    - chmod 400 /k3s-boot/ssh-key
    - cd /k3s-boot
    - sed -i "s/##client##/${client}/g" .env
    - sed -i "s/##domain##/${domain}/g" .env
    - sed -i "s/##environment##/${environment}/g" .env
    - sed -i "s/##region##/${region}/g" .env
    - sed -i "s/##peer_vpc_id##/${peer_vpc_id}/g" .env
    #TODO: static value needs addressing
    - sed -i "s/##pm4ml_client_cert_local_dir##/\/k3s-boot\/pm4ml-certoutput\//g" .env
    - aws s3 cp s3://$BUCKET/$environment/k3saddons/ansible_internal_pm4ml_output.yaml ./ansible_pm4ml_output.yaml --sse
    - make backend -- -auto-approve || true
    - make apply -- -auto-approve || true
    - make uninstall-pm4ml
  when: manual

  
.deploy_aws_infra: &deploy_aws_infra
  script:
    - cd $CI_IMAGE_PROJECT_DIR/terraform
    - aws s3 sync s3://${BUCKET}/${environment}/terraform/oauth-apps/ ./oauth-apps/ || true
    - terraform init -backend-config ${CI_PROJECT_DIR}/backend.hcl
    - terraform apply -auto-approve || true
    - aws s3 sync $CI_IMAGE_PROJECT_DIR/kubespray-inventory s3://${BUCKET}/${environment}/kubespray-inventory/ --sse || true
    - aws s3 cp $CI_IMAGE_PROJECT_DIR/terraform/ssh_provisioner_key s3://${BUCKET}/${environment}/terraform/ --sse || true
    - aws s3 sync ./oauth-apps s3://${BUCKET}/${environment}/terraform/oauth-apps/ --sse || true

Deploy AWS Infrastructure:
  stage: "Deploy AWS infrastructure"
  <<: *deploy_aws_infra
  when: manual

.create_k3s_cluster: &create_k3s_cluster
  image: 
    name: ghcr.io/pm4ml/k3sbootstrap:$K3S_IAC_IMAGE_VERSION
  before_script:
    - export BUCKET=$(grep bucket backend.hcl | cut -f2 -d '=' | tr -d '"' | xargs)
    - export TF_VAR_bucket=$(grep bucket backend.hcl | cut -f2 -d '=' | tr -d '"' | xargs)
    - aws s3 sync s3://$BUCKET/bootstrap ./k8ss3bootstrap/ --sse || true
    - export CI_IMAGE_PROJECT_DIR=/k3s-boot
    - export peer_vpc_id=$(terraform output -state=k8ss3bootstrap/terraform.tfstate vpc_id | tr -d '"')
    - for var in $(jq -r 'to_entries[] | "\(.key)=\(.value)\n"' ./workbench-config.json); do export $var; done
    - for var in $(jq -r 'to_entries[] | "TF_VAR_\(.key)=\(.value)\n"' ./workbench-config.json); do export $var; done
    - sed -i "s/##accesskeyid##/${AWS_ACCESS_KEY_ID}/g" $CI_IMAGE_PROJECT_DIR/aws_conf
    - sed -i "s|##accesssecret##|${AWS_SECRET_ACCESS_KEY}|g" $CI_IMAGE_PROJECT_DIR/aws_conf
    - sed -i "s/##region##/${region}/g" $CI_IMAGE_PROJECT_DIR/aws_conf
    - mkdir -p ~/.aws && cp $CI_IMAGE_PROJECT_DIR/aws_conf ~/.aws/credentials
    - "which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )"
    - eval `ssh-agent`
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
    - if [ -d ./k3s-sync-dir ]; then cp -r ./k3s-sync-dir/. /k3s-boot; else echo "not local files to copy"; fi 
    - aws s3 sync s3://$BUCKET/$environment ./k8ss3/ --sse || true
    - export domain=$(terraform output -state=k8ss3/terraform.tfstate public_subdomain | tr -d '"')      
  script:
    - export
    - cd /k3s-boot
    - sed -i "s/##client##/${client}/g" .env
    - sed -i "s/##domain##/${domain}/g" .env
    - sed -i "s/##environment##/${environment}/g" .env
    - sed -i "s/##region##/${region}/g" .env
    - sed -i "s/##peer_vpc_id##/${peer_vpc_id}/g" .env
    - make backend -- -auto-approve
    - make apply -- -auto-approve
    - make k3s
    - make kubeconfig
    - aws s3 cp /k3s-boot/kubeconfig s3://$BUCKET/$environment/k3saddons/ --sse
    - aws s3 cp /k3s-boot/ssh-key s3://${BUCKET}/$environment/k3saddons/ --sse
    - aws s3 sync s3://$BUCKET/$environment/k3saddons /k3s-boot/k3saddons --sse
    - cp -r /k3s-boot/k3saddons/* /k3s-boot/
    - if [ ! -f /k3s-boot/vault-keys.json ]; then make vault; else echo "found vault, skipping make vault"; fi 
    - aws s3 cp /k3s-boot/vault-keys.json s3://$BUCKET/$environment/k3saddons/ --sse   
    - make wireguard
    - aws s3 cp /k3s-boot/wireguard.private.key s3://$BUCKET/$environment/k3saddons/ --sse
    - aws s3 cp /k3s-boot/wireguard.public.key s3://$BUCKET/$environment/k3saddons/ --sse
    - make monitoring 

Create k3s Cluster:
  stage: "Run k3s"
  <<: *create_k3s_cluster
  when: manual

.create_gw_cluster: &create_gw_cluster
  script:
    - cd /kubespray
    - ansible-playbook -i $CI_IMAGE_PROJECT_DIR/kubespray-inventory/hosts-gateway -e @$CI_IMAGE_PROJECT_DIR/kubespray-inventory/extra-vars.json ./cluster.yml $ANSIBLE_FEATURE_TOGGLES
    - aws s3 cp inventory/artifacts/cluster/admin.conf s3://$BUCKET/$environment/admin-gateway.conf --sse

Create Gateway Cluster:
  stage: "Run Kubespray"
  <<: *create_gw_cluster
  when: manual


.deploy_vault: &deploy_vault
  script:
    - cd $CI_IMAGE_PROJECT_DIR/terraform/k8s-setup/vault-deploy
    - terraform init -backend-config ${CI_PROJECT_DIR}/backend.hcl
    - terraform apply -auto-approve -var="aws_secret_key=$AWS_SECRET_ACCESS_KEY" -var="aws_access_key=$AWS_ACCESS_KEY_ID" -var="project_root_path=$CI_IMAGE_PROJECT_DIR"
    - aws s3 cp $CI_IMAGE_PROJECT_DIR/vault_seal_key s3://${BUCKET}/${environment}/ --sse

1. Deploy Vault:
  stage: "Deploy Base Platform"
  <<: *deploy_vault
  when: manual

.deploy_stateful_svcs: &deploy_stateful_svcs
  script:
    - cd $CI_IMAGE_PROJECT_DIR/terraform/k8s-setup/state-setup
    - kubectl --kubeconfig=../../../admin-gateway.conf -n default wait --for=condition=ready certificate/wildcard-cert-internal --timeout=180s
    - terraform init -backend-config ${CI_PROJECT_DIR}/backend.hcl
    - terraform apply -auto-approve -var="project_root_path=$CI_IMAGE_PROJECT_DIR"

2a. Deploy Stateful Services:
  stage: "Deploy Base Platform"
  <<: *deploy_stateful_svcs
  when: manual

.deploy_support_svcs: &deploy_support_svcs
  script:
    - cd $CI_IMAGE_PROJECT_DIR/terraform/k8s-setup/support-svcs
    - aws s3 sync s3://${BUCKET}/${environment}/terraform/oauth-apps/ ./oauth-apps/ || true
    - kubectl --kubeconfig=../../../admin-gateway.conf -n default wait --for=condition=ready certificate/wildcard-cert-internal --timeout=180s
    - terraform init -backend-config ${CI_PROJECT_DIR}/backend.hcl
    - terraform apply -auto-approve -var="project_root_path=$CI_IMAGE_PROJECT_DIR"

2b. Deploy Support Services:
  stage: "Deploy Base Platform"
  <<: *deploy_support_svcs
  when: manual

.deploy_platform: &deploy_platform
  script:
    - cd $CI_IMAGE_PROJECT_DIR/terraform/k8s-setup
    - terraform init -backend-config ${CI_PROJECT_DIR}/backend.hcl
    - terraform apply -auto-approve -var="project_root_path=$CI_IMAGE_PROJECT_DIR"
    - cd $CI_IMAGE_PROJECT_DIR/terraform/k8s-setup/mojaloop-roles
    - terraform init -backend-config ${CI_PROJECT_DIR}/backend.hcl
    - terraform apply -auto-approve -var="project_root_path=$CI_IMAGE_PROJECT_DIR"
    - chmod o-w $CI_IMAGE_PROJECT_DIR/terraform/apps/wso2/config/
    - cd $CI_IMAGE_PROJECT_DIR/terraform/apps/wso2/config/
    - terraform init -backend-config ${CI_PROJECT_DIR}/backend.hcl
    - terraform apply -auto-approve -var="project_root_path=$CI_IMAGE_PROJECT_DIR"
    - ansible-playbook publish.yaml

1. Initial Install Base Apps:
  stage: "Deploy Platform"
  <<: *deploy_platform
  when: manual

.setup_pm4mls: &setup_pm4mls
  script:
    - cd $CI_IMAGE_PROJECT_DIR/terraform/k8s-setup/pm4mls
    - terraform init -backend-config ${CI_PROJECT_DIR}/backend.hcl
    - terraform apply -auto-approve -var="project_root_path=$CI_IMAGE_PROJECT_DIR"
    - aws s3 cp $CI_IMAGE_PROJECT_DIR/terraform/k8s-setup/pm4mls/ansible_internal_pm4ml_output.yaml s3://${BUCKET}/${environment}/k3saddons/ --sse
    - aws s3 cp $CI_IMAGE_PROJECT_DIR/terraform/k8s-setup/pm4mls/onboarding_internal_pm4ml_output.json s3://${BUCKET}/${environment}/k3saddons/ --sse
    - aws s3 cp $CI_IMAGE_PROJECT_DIR/terraform/k8s-setup/pm4mls/ansible_external_pm4ml_output.yaml s3://${BUCKET}/${environment}/k3saddons/ --sse
    - aws s3 cp $CI_IMAGE_PROJECT_DIR/terraform/k8s-setup/pm4mls/onboarding_external_pm4ml_output.json s3://${BUCKET}/${environment}/k3saddons/ --sse

2a. Setup PM4MLs:
  stage: "Deploy Platform"
  <<: *setup_pm4mls
  when: manual

.install_internal_pm4mls: &install_internal_pm4mls
  image: 
    name: ghcr.io/pm4ml/k3sbootstrap:$K3S_IAC_IMAGE_VERSION
  before_script:
    - export BUCKET=$(grep bucket backend.hcl | cut -f2 -d '=' | tr -d '"' | xargs)
    - export TF_VAR_bucket=$(grep bucket backend.hcl | cut -f2 -d '=' | tr -d '"' | xargs)
    - aws s3 sync s3://$BUCKET/bootstrap ./k8ss3bootstrap/ --sse || true
    - export CI_IMAGE_PROJECT_DIR=/k3s-boot
    - export peer_vpc_id=$(terraform output -state=k8ss3bootstrap/terraform.tfstate vpc_id | tr -d '"')
    - for var in $(jq -r 'to_entries[] | "\(.key)=\(.value)\n"' ./workbench-config.json); do export $var; done
    - for var in $(jq -r 'to_entries[] | "TF_VAR_\(.key)=\(.value)\n"' ./workbench-config.json); do export $var; done
    - sed -i "s/##accesskeyid##/${AWS_ACCESS_KEY_ID}/g" $CI_IMAGE_PROJECT_DIR/aws_conf
    - sed -i "s|##accesssecret##|${AWS_SECRET_ACCESS_KEY}|g" $CI_IMAGE_PROJECT_DIR/aws_conf
    - sed -i "s/##region##/${region}/g" $CI_IMAGE_PROJECT_DIR/aws_conf
    - mkdir -p ~/.aws && cp $CI_IMAGE_PROJECT_DIR/aws_conf ~/.aws/credentials
    - "which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )"
    - eval `ssh-agent`
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
    - if [ -d ./k3s-sync-dir ]; then cp -r ./k3s-sync-dir/. /k3s-boot; else echo "not local files to copy"; fi 
    - aws s3 sync s3://$BUCKET/$environment ./k8ss3/ --sse || true
    - export domain=$(terraform output -state=k8ss3/terraform.tfstate public_subdomain | tr -d '"')
  script:
    - aws s3 cp s3://$BUCKET/$environment/k3saddons/ssh-key /k3s-boot/ssh-key --sse
    - chmod 400 /k3s-boot/ssh-key
    - cd /k3s-boot
    - sed -i "s/##client##/${client}/g" .env
    - sed -i "s/##domain##/${domain}/g" .env
    - sed -i "s/##environment##/${environment}/g" .env
    - sed -i "s/##region##/${region}/g" .env
    - sed -i "s/##peer_vpc_id##/${peer_vpc_id}/g" .env
    #TODO: static value needs addressing
    - sed -i "s/##pm4ml_client_cert_local_dir##/\/k3s-boot\/pm4ml-certoutput\//g" .env
    - aws s3 cp s3://$BUCKET/$environment/k3saddons/ansible_internal_pm4ml_output.yaml ./ansible_pm4ml_output.yaml --sse
    - make backend -- -auto-approve
    - make apply -- -auto-approve
    - make pm4ml

2b. Install Internal PM4MLs:
  stage: "Deploy Platform"
  <<: *install_internal_pm4mls
  when: manual

.install_post_deploy: &install_post_deploy
  script:
  #todo remove hardcoded values here
    - aws s3 sync s3://${BUCKET}/${environment}/k3saddons/pm4ml-certoutput/ terraform/k8s-setup/addons/pm4ml-certoutput
    - aws s3 sync s3://${client}${environment}k3s-pm4mladdons-state/k3s ./k3sstate --sse || true
    - if [ -f k3sstate/terraform.tfstate ]; then export pm4ml_nat_ips_tmp=$(terraform output -state=k3sstate/terraform.tfstate nat_public_ips); else ls -la ./k3sstate; fi 
    - echo $pm4ml_nat_ips_tmp
    - if [ $(echo $pm4ml_nat_ips_tmp | grep --quiet Warning) ]; then echo "nats not found"; else export TF_VAR_pm4ml_nat_ips=$pm4ml_nat_ips_tmp; fi
    - cp $CI_PROJECT_DIR/ext-pm4ml-certs.yaml terraform/k8s-setup/addons || true
    - cd $CI_IMAGE_PROJECT_DIR/terraform/k8s-setup/addons
    - terraform init -backend-config ${CI_PROJECT_DIR}/backend.hcl
    - terraform apply -auto-approve -var="project_root_path=$CI_IMAGE_PROJECT_DIR"
    - aws s3 sync $CI_IMAGE_PROJECT_DIR/terraform/k8s-setup/addons/sim_tests s3://${BUCKET}/${environment}/k8s-cluster/sim_tests --sse

2c. Install Post Deployment:
  stage: "Deploy Platform"
  <<: *install_post_deploy
  when: manual

.deploy_switch_iac: &deploy_switch_iac
  script:
    - *deploy_aws_infra
    - *create_gw_cluster
    - *deploy_vault
    - *deploy_stateful_svcs
    - *deploy_support_svcs
    - *deploy_platform

Deploy IaC:
  stage: "Deploy All"
  extends: *deploy_switch_iac
  when: manual