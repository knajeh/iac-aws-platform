variables:
  GIT_SSL_NO_VERIFY: "overwritten"
  PLATFORM_IAC_IMAGE_VERSION: "overwritten"
  K3S_IAC_IMAGE_VERSION: "overwritten"

#job template for 1. Run PM4ML GP Tests	  
.Run PM4ML GP Tests-job-template:
  script:
    - aws s3 sync s3://$bucket/$environment/tests/ $CI_IMAGE_PROJECT_DIR/tests --sse
    #- aws s3 sync s3://$bucket/$environment/k8s-cluster/secrets_chart/ $CI_IMAGE_PROJECT_DIR/secrets_chart --sse
    - aws s3 cp s3://$bucket/$environment/k3saddons/onboarding_internal_pm4ml_output.json $CI_IMAGE_PROJECT_DIR/tests
    - cd tests
    - newman run https://raw.githubusercontent.com/pm4ml/pm4ml-test-scripts/${TAG_PM4ML_GP}/postman/Deregister_Existing_Oracles.postman_collection.json --insecure -e Lab.postman_environment.json
    - newman run https://raw.githubusercontent.com/mojaloop/postman/${TAG_ML_GP}/MojaloopHub_Setup.postman_collection.json --insecure -e Lab.postman_environment.json
    #- newman run https://raw.githubusercontent.com/mojaloop/postman/${TAG_ML_GP}/MojaloopSims_Onboarding.postman_collection.json --ssl-client-cert-list test_cert_list.json --insecure -e Lab.postman_environment.json || true
    - newman run https://raw.githubusercontent.com/pm4ml/pm4ml-test-scripts/${TAG_PM4ML_GP}/postman/Onboard-Generic-FSP-Central_Ledger.postman_collection.json --insecure -e Lab.postman_environment.json --ssl-client-cert-list test_cert_list.json -d onboarding_internal_pm4ml_output.json || true
    - newman run https://raw.githubusercontent.com/pm4ml/pm4ml-test-scripts/${TAG_PM4ML_GP}/postman/Onboard-Generic-FSP-Sim_Backend.postman_collection.json --insecure -e Lab.postman_environment.json --ssl-client-cert-list test_cert_list.json -d onboarding_internal_pm4ml_output.json || true
    - newman run https://raw.githubusercontent.com/pm4ml/pm4ml-test-scripts/${TAG_PM4ML_GP}/postman/Mojaloop-Payment-Manager-Golden-Path.postman_collection.json --insecure -e Lab.postman_environment.json --ssl-client-cert-list test_cert_list.json --folder feature-tests --reporters html,junit,cli --reporter-html-export ${CI_PROJECT_DIR}/gp_report.html --reporter-junit-export ${CI_PROJECT_DIR}/gp_report.xml --reporter-html-template ../tests/template-default-colored.hbs -x
  after_script:
    - curl https://slack.com/api/files.upload
      -F file=@"gp_report.html"
      -F channels="${SLACK_GITLABCI_ALERTS_CHANNEL_NAME}","${SLACK_GITLABCI_GP_REPORTS_CHANNEL_NAME}"
      -F token="${SLACK_GITLABCI_ALERTS_TOKEN}"
      -F title="Mojaloop PM4ML Goldenpath Test (Postman) Results.'${ENVIRONMENT}'-$(date +\"%Y-%m-%d-%H:%M:%S\")"
      -F filetype="html"
  artifacts:
    paths:
      - gp_report.html
    reports:
      junit: gp_report.xml

1. Manual Run PM4ML GP Tests:
  stage: "Run Tests"
  extends: .Run PM4ML GP Tests-job-template
  when: manual
  except:
    - schedules

1. Scheduled Run PM4ML GP Tests:
  stage: "Run Tests"
  allow_failure: true
  extends: .Run PM4ML GP Tests-job-template
  only:
    refs:
      - schedules
    variables:
      - $SCHEDULE_PM4ML == "PM4ML_GP"

2. Run PM4ML UI Tests:
  stage: "Run Tests"
  allow_failure: true
  when: manual
  script:
    - git clone -b MBP-137 https://github.com/pm4ml/mojaloop-payment-manager-ui.git ${CI_IMAGE_PROJECT_DIR}/mojaloop-payment-manager-ui
    - exit_code=0
    - cd ${CI_IMAGE_PROJECT_DIR}/mojaloop-payment-manager-ui/ui-tests/tests
    - echo ${SLACK_TOKEN}
    - npm install testcafe-reporter-html
    - echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list
    - wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | apt-key add -
    - apt-get update
    - apt-get install -y google-chrome-stable
    - npm ci
    - ENV="other" PM4ML_ENDPOINT=${PM4ML_ENDPOINT} SIM_CORE_CONNECTOR_ENDPOINT=${SIM_CORE_CONNECTOR_ENDPOINT} npm run test:headless | tee report.log || exit_code=$?
    - cp ${CI_IMAGE_PROJECT_DIR}/mojaloop-payment-manager-ui/ui-tests/tests/report.log ${CI_PROJECT_DIR}/mojaloop-payment-manager-ui_report.log
  after_script:
    - curl https://slack.com/api/files.upload
      -F file=@"mojaloop-payment-manager-ui_report.log"
      -F channels="${SLACK_GITLABCI_ALERTS_CHANNEL_NAME}"
      -F token="${SLACK_TOKEN}"
      -F title="Run Mojaloop Payment Manager UI Tests"
      -F filetype="log"
  artifacts:
    paths:
      - mojaloop-payment-manager-ui_report.log
      - exit $exit_code

# #job template for 4. Run Platform GP Tests:
# .Run Platform GP Tests-job-template:
#   script:
#     - aws s3 sync s3://${BUCKET}/${TF_VAR_environment}/k8s-cluster/sim_tests/ $CI_IMAGE_PROJECT_DIR/sim_tests --sse
#     - aws s3 sync s3://${BUCKET}/${TF_VAR_environment}/k8s-cluster/secrets_chart/ $CI_IMAGE_PROJECT_DIR/secrets_chart --sse
#     - aws s3 cp s3://${BUCKET}/${TF_VAR_environment}/k3saddons/onboarding_internal_pm4ml_output.json $CI_IMAGE_PROJECT_DIR/sim_tests
#     - aws s3 cp s3://${BUCKET}/${TF_VAR_environment}/k3saddons/onboarding_external_pm4ml_output.json $CI_IMAGE_PROJECT_DIR/sim_tests
#     - cp $CI_PROJECT_DIR/tests/Myanmar-Golden-Path.postman_collection.json $CI_IMAGE_PROJECT_DIR/sim_tests
#     - cd sim_tests
#     - jq -s '[.[][]]' onboarding_external_pm4ml_output.json onboarding_internal_pm4ml_output.json > /tmp/onboarding_pm4ml_output.json
#     - newman run https://raw.githubusercontent.com/pm4ml/pm4ml-test-scripts/${TAG_PM4ML_GP}/postman/Deregister_Existing_Oracles.postman_collection.json --insecure -e Lab.postman_environment.json
#     - newman run https://raw.githubusercontent.com/pm4ml/pm4ml-test-scripts/${TAG_PM4ML_GP}/postman/Onboard-Generic-FSP-Central_Ledger.postman_collection.json --insecure -e Lab.postman_environment.json --ssl-client-cert-list test_cert_list.json -d /tmp/onboarding_pm4ml_output.json || true
#     - newman run https://raw.githubusercontent.com/pm4ml/pm4ml-test-scripts/${TAG_PM4ML_GP}/postman/Account_Alias_Oracle_Registration.postman_collection.json --insecure -e Lab.postman_environment.json --ssl-client-cert-list test_cert_list.json || true
#     - newman run https://raw.githubusercontent.com/pm4ml/pm4ml-test-scripts/${TAG_PM4ML_GP}/postman/Account_Alias_Oracle_Setup.postman_collection.json --insecure -e Lab.postman_environment.json --ssl-client-cert-list test_cert_list.json -d /tmp/onboarding_pm4ml_output.json || true
#     - newman run https://raw.githubusercontent.com/pm4ml/pm4ml-test-scripts/${TAG_PM4ML_GP}/postman/Onboard-Generic-FSP-Sim_Backend.postman_collection.json --insecure -e Lab.postman_environment.json --ssl-client-cert-list test_cert_list.json -d onboarding_internal_pm4ml_output.json || true
#     - newman run Myanmar-Golden-Path.postman_collection.json --ssl-client-cert-list test_cert_list.json --folder feature-tests --insecure -e Lab.postman_environment.json --reporters html,junit,cli --reporter-html-export ${CI_PROJECT_DIR}/Platform_report.html --reporter-junit-export ${CI_PROJECT_DIR}/alias_report.xml --reporter-html-template ../tests/template-default-colored.hbs -x
#   after_script:
#     - curl https://slack.com/api/files.upload
#       -F file=@"Platform_report.html"
#       -F channels="${SLACK_GITLABCI_ALERTS_CHANNEL_NAME}"
#       -F token="${SLACK_GITLABCI_ALERTS_TOKEN}"
#       -F title="Myanmar Goldenpath Test (Postman) Results"
#       -F filetype="html"
#   artifacts:
#     paths:
#       - Platform_report.html
      
# #    - curl https://slack.com/api/files.upload
# #     -F file=@"alias_report.html"
# #      -F channels="${SLACK_GITLABCI_GP_REPORTS_CHANNEL_NAME}"
# #      -F token="${SLACK_GITLABCI_ALERTS_TOKEN}"
# #      -F title="Alias Goldenpath Test (Postman) Results.'${ENVIRONMENT}'-$(date +\"%Y-%m-%d-%H:%M:%S\")"
# #      -F filetype="html"
# #  artifacts:
# #    reports:
# #      junit: alias_report.xml


# 3. Manual Run Platform GP Tests:
#   stage: "Run Tests"
#   extends: .Run Platform GP Tests-job-template
#   when: manual
#   except:
#     - schedules

# 3. Scheduled Run Platform GP Tests:
#   stage: "Run Tests"
#   allow_failure: true
#   extends: .Run Platform GP Tests-job-template
#   only:
#     refs:
#       - schedules
#     variables:
#       - $SCHEDULE_PLATFORM == "PLAT_GP"

.ttk-snippets:
  # image: &ttk-snippets-image
  #   name: mojaloop/ml-testing-toolkit-client-lib:latest
  set-env-vars: &ttk-snippets-set-env-vars
    # - export TERRAFORM_VERSION=1.0.5
    # - export GLIBC_VER=2.34-r0
    # - apk --no-cache add binutils curl jq && curl -sL https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub -o /etc/apk/keys/sgerrand.rsa.pub && curl -sLO https://github.com/sgerrand/alpine-pkg-glibc/releases/download/${GLIBC_VER}/glibc-${GLIBC_VER}.apk && curl -sLO https://github.com/sgerrand/alpine-pkg-glibc/releases/download/${GLIBC_VER}/glibc-bin-${GLIBC_VER}.apk && apk add --no-cache glibc-${GLIBC_VER}.apk glibc-bin-${GLIBC_VER}.apk && curl -sL https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip -o awscliv2.zip && unzip awscliv2.zip && aws/install && rm -rf awscliv2.zip aws /usr/local/aws-cli/v2/*/dist/aws_completer /usr/local/aws-cli/v2/*/dist/awscli/data/ac.index /usr/local/aws-cli/v2/*/dist/awscli/examples glibc-${GLIBC_VER}.apk glibc-bin-${GLIBC_VER}.apk /var/cache/apk/*
    # - wget -q https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip -O /tmp/terraform_${TERRAFORM_VERSION}_linux_amd64.zip && unzip /tmp/terraform_${TERRAFORM_VERSION}_linux_amd64.zip -d /usr/bin/ && rm /tmp/terraform_${TERRAFORM_VERSION}_linux_amd64.zip
    - export bucket=$REMOTE_STATE_BUCKET
    - for var in $(jq -r 'to_entries[] | "\(.key)=\(.value)\n"' ./workbench-config.json); do export $var; done
    - for var in $(jq -r 'to_entries[] | "TF_VAR_\(.key)=\(.value)\n"' ./workbench-config.json); do export $var; done
    - export TTK_TESTCASES_VERSION=${TAG_TTK_TEST}
    - export PM4ML_TTK_TESTCASES_VERSION=${TAG_PM4ML_TTK_TEST}
    - export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
    - export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    - export AWS_DEFAULT_REGION=${region}
    - aws s3 sync s3://$bucket/$environment ./k8ss3/ --sse || true
    - export private_subdomain=$(terraform output -state=k8ss3/base-infra-aws/terraform.tfstate private_subdomain | tr -d '"')
    - export public_subdomain=$(terraform output -state=k8ss3/base-infra-aws/terraform.tfstate public_subdomain | tr -d '"')
    - export ttkBackendUrl=http://ttkbackend.${private_subdomain};
    - export ttkSim1TtkBackendUrl=http://ttksim1.${private_subdomain};
    - export pm4mlTtkSim1TtkBackendUrl=http://ttk.pm4mlttksim1.${client}${environment}k3s.${public_subdomain};
    - npm install @mojaloop/ml-testing-toolkit-client-lib --global
  download-ttk-test-cases: &ttk-snippets-download-ttk-test-cases
    - |
      cd /tmp;
      export testCasesZipUrl=https://github.com/mojaloop/testing-toolkit-test-cases/archive/refs/tags/v${TTK_TESTCASES_VERSION}.zip;
      echo "Downloading the test collection from $testCasesZipUrl";
      wget $testCasesZipUrl -O downloaded-test-collections.zip;
      mkdir tmp_test_cases;
      unzip -d tmp_test_cases -o downloaded-test-collections.zip;
      rm downloaded-test-collections.zip
  download-default-env: &ttk-snippets-download-default-env
    - |
      echo "Downloading the default environment file...";
      cd /tmp;
      wget -O user_config.json $ttkBackendUrl/api/config/user;
      defaultEnvFileName=`node -pe 'JSON.parse(process.argv[1]).runtime.DEFAULT_ENVIRONMENT_FILE_NAME' "$(cat user_config.json)"`;
      wget -O environment_http_response.json $ttkBackendUrl/api/samples/loadFolderWise?environment=examples/environments/$defaultEnvFileName;
      node -pe 'JSON.stringify({inputValues: JSON.parse(process.argv[1]).body.environment})' "$(cat environment_http_response.json)" > cli-testcase-environment.json;
  execute-provisioning-collection: &ttk-snippets-execute-provisioning-collection
    - |
      cd /tmp;
      export provisioningTestCasesPathInZip=testing-toolkit-test-cases-${TTK_TESTCASES_VERSION}/collections/hub/provisioning;
      ml-ttk-cli -e cli-testcase-environment.json -i tmp_test_cases/$provisioningTestCasesPathInZip -u $ttkBackendUrl --report-format html --report-target file://${CI_PROJECT_DIR}/ttk-provisioning-report.html || true;
      echo "Done";
  execute-golden-path-collection: &ttk-snippets-execute-golden-path-collection
    - |
      cd /tmp;
      export goldenPathTestCasesPathInZip=testing-toolkit-test-cases-${TTK_TESTCASES_VERSION}/collections/hub/golden_path;
      ml-ttk-cli -e cli-testcase-environment.json -i tmp_test_cases/$goldenPathTestCasesPathInZip -u $ttkBackendUrl --report-format html --report-target file://${CI_PROJECT_DIR}/ttk-goldenpath-report.html;
      echo "Done";
  execute-bulk-transfers-collection: &ttk-snippets-execute-bulk-transfers-collection
    - |
      cd /tmp;
      export bulkTransfersTestCasesPathInZip=testing-toolkit-test-cases-${TTK_TESTCASES_VERSION}/collections/hub/other_tests/bulk_transfers;
      ml-ttk-cli -e cli-testcase-environment.json -i tmp_test_cases/$bulkTransfersTestCasesPathInZip -u $ttkBackendUrl --report-format html --report-target file://${CI_PROJECT_DIR}/ttk-bulk-transfers-report.html;
      echo "Done";
  download-ttksim1-env: &ttk-snippets-download-ttksim1-env
    - |
      echo "Downloading the default environment file...";
      cd /tmp;
      wget -O user_config.json $ttkSim1TtkBackendUrl/api/config/user;
      defaultEnvFileName=`node -pe 'JSON.parse(process.argv[1]).runtime.DEFAULT_ENVIRONMENT_FILE_NAME' "$(cat user_config.json)"`;
      wget -O environment_http_response.json $ttkSim1TtkBackendUrl/api/samples/loadFolderWise?environment=examples/environments/$defaultEnvFileName;
      node -pe 'JSON.stringify({inputValues: JSON.parse(process.argv[1]).body.environment})' "$(cat environment_http_response.json)" > cli-ttksim1-environment.json;
  execute-sdk-bulk-setup-collection: &ttk-snippets-execute-sdk-bulk-setup-collection
    - |
      cd /tmp;
      export sdkBulkSetupTestCasesPathInZip=testing-toolkit-test-cases-${TTK_TESTCASES_VERSION}/collections/hub/provisioning_sdkbulk;
      ml-ttk-cli -e cli-testcase-environment.json -i tmp_test_cases/$sdkBulkSetupTestCasesPathInZip -u $ttkBackendUrl --report-format html --report-target file://${CI_PROJECT_DIR}/ttk-sdk-bulk-setup-report.html || true;
      echo "Done";
  execute-sdk-bulk-validation-collection: &ttk-snippets-execute-sdk-bulk-validation-collection
    - |
      cd /tmp;
      export sdkBulkValTestCasesPathInZip=testing-toolkit-test-cases-${TTK_TESTCASES_VERSION}/collections/hub/sdk-bulk;
      ml-ttk-cli -e cli-ttksim1-environment.json -i tmp_test_cases/$sdkBulkValTestCasesPathInZip -u $ttkSim1TtkBackendUrl --report-format html --report-target file://${CI_PROJECT_DIR}/ttk-sdk-bulk-val-report.html;
      echo "Done";
  artifacts: &ttk-snippets-artifacts
    when: always
    paths:
      - ${CI_PROJECT_DIR}/ttk-provisioning-report.html
      - ${CI_PROJECT_DIR}/ttk-goldenpath-report.html

3. Run PM4ML TTK Tests:
  stage: "Run Tests"
  # image: *ttk-snippets-image
  before_script:
    - echo "running pm4ml TTK tests"
  script:
    - *ttk-snippets-set-env-vars
    - aws s3 sync s3://$bucket/$environment/tests/ $CI_IMAGE_PROJECT_DIR/tests --sse
    - |
      echo "Downloading the test collection...";
      cd /tmp;
      export testCasesZipUrl=https://github.com/pm4ml/pm4ml-test-scripts/archive/refs/tags/v${PM4ML_TTK_TESTCASES_VERSION}.zip;
      wget $testCasesZipUrl -O downloaded-test-collections.zip;
      mkdir tmp_test_cases;
      unzip -d tmp_test_cases -o downloaded-test-collections.zip;
    - |
      cd /tmp;
      export pm4mlGoldenPathTestCasesPathInZip=pm4ml-test-scripts-${PM4ML_TTK_TESTCASES_VERSION}/ttk/collections/golden_path;
      export pm4mlProvisioningTtkSimsTestCasesPathInZip=pm4ml-test-scripts-${PM4ML_TTK_TESTCASES_VERSION}/ttk/collections/provisioning;
      ## For adding MSISDNs in oracle and fundIn operations, executing provisioning collection from the ttk backend of the switch
      ml-ttk-cli -e $CI_IMAGE_PROJECT_DIR/tests/pm4ml_ttk_environment.json -i tmp_test_cases/$pm4mlProvisioningTtkSimsTestCasesPathInZip -u $ttkBackendUrl --report-format html --report-target file://${CI_PROJECT_DIR}/ttk-pm4ml-provisioning-ttksims-report.html --extra-summary-information="Test Suite:PM4ML TTKSIM2 and TTKSIM3 Provisioning,Job ID: $CI_JOB_ID"  || true;
      ## For testing transfers, executing pm4ml ttk golden path collection from pm4mlttksim1
      ml-ttk-cli -e $CI_IMAGE_PROJECT_DIR/tests/pm4ml_ttk_environment.json -i tmp_test_cases/$pm4mlGoldenPathTestCasesPathInZip -u $pm4mlTtkSim1TtkBackendUrl --report-format html --report-target file://${CI_PROJECT_DIR}/ttk-pm4ml-gp-report.html --extra-summary-information="Test Suite:PM4ML GP TTK,Job ID: $CI_JOB_ID";
      echo "Done";
  artifacts: &ttk-snippets-artifacts
    when: always
    paths:
      - ${CI_PROJECT_DIR}/ttk-pm4ml-provisioning-ttksims-report.html
      - ${CI_PROJECT_DIR}/ttk-pm4ml-gp-report.html
#  artifacts:
#    when: always
#    paths:
#      - ${CI_PROJECT_DIR}/pm4ml-ttk-goldenpath-report.html
  when: manual

4. Run TTK Tests:
  stage: "Run Tests"
  # image: *ttk-snippets-image
  before_script:
    - echo "running with testing toolkit image"
  script:
    - *ttk-snippets-set-env-vars
    - *ttk-snippets-download-ttk-test-cases
    - *ttk-snippets-download-default-env
    - *ttk-snippets-execute-provisioning-collection
    - *ttk-snippets-execute-golden-path-collection
  artifacts: *ttk-snippets-artifacts
  when: manual

5. Run RBAC Tests:
  stage: "Run Tests"
  script:
    - helm --kubeconfig=$ENV_S3_DIR/k8s/admin.conf test bof --filter name=bof-rbac-tests -n mojaloop || true
    - kubectl --kubeconfig=$ENV_S3_DIR/k8s/admin.conf  -n mojaloop logs bof-rbac-tests
    - exit `kubectl --kubeconfig=$ENV_S3_DIR/k8s/admin.conf  -n mojaloop get pod bof-rbac-tests --output="jsonpath={.status.containerStatuses[].state.terminated.exitCode}"`
  when: manual

6. Run Report Tests:
  stage: "Run Tests"
  script:
    - helm --kubeconfig=$ENV_S3_DIR/k8s/admin.conf  test bof --filter name=bof-report-tests -n mojaloop || true
    - kubectl --kubeconfig=$ENV_S3_DIR/k8s/admin.conf  -n mojaloop logs bof-report-tests
    - exit `kubectl --kubeconfig=$ENV_S3_DIR/k8s/admin.conf  -n mojaloop get pod bof-report-tests --output="jsonpath={.status.containerStatuses[].state.terminated.exitCode}"`
  when: manual

7. Run MCM Tests:
  stage: "Run Tests"
  script:
    - helm --kubeconfig=$ENV_S3_DIR/k8s/admin.conf  test connection-manager -n mcm || true
    - kubectl --kubeconfig=$ENV_S3_DIR/k8s/admin.conf  -n mcm logs connection-manager-api-test
    - exit `kubectl --kubeconfig=$ENV_S3_DIR/k8s/admin.conf  -n mcm get pod connection-manager-api-test --output="jsonpath={.status.containerStatuses[].state.terminated.exitCode}"`
  when: manual

9. Run TTK Bulk Tests:
  stage: "Run Tests"
  # image: *ttk-snippets-image
  before_script:
    - echo "running with testing toolkit image"
  script:
    - *ttk-snippets-set-env-vars
    - *ttk-snippets-download-ttk-test-cases
    - *ttk-snippets-download-default-env
    - *ttk-snippets-execute-provisioning-collection
    - *ttk-snippets-execute-bulk-transfers-collection
  artifacts: &ttk-snippets-artifacts
    when: always
    paths:
      - ${CI_PROJECT_DIR}/ttk-bulk-transfers-report.html
  when: manual

10. Run TTK SDK Bulk Tests:
  stage: "Run Tests"
  # image: *ttk-snippets-image
  before_script:
    - echo "running with testing toolkit image"
  script:
    - *ttk-snippets-set-env-vars
    - *ttk-snippets-download-ttk-test-cases
    - *ttk-snippets-download-default-env
    - *ttk-snippets-download-ttksim1-env
    - *ttk-snippets-execute-sdk-bulk-setup-collection
    - *ttk-snippets-execute-sdk-bulk-validation-collection
  artifacts: &ttk-snippets-artifacts
    when: always
    paths:
      - ${CI_PROJECT_DIR}/ttk-sdk-bulk-setup-report.html
      - ${CI_PROJECT_DIR}/ttk-sdk-bulk-val-report.html
  when: manual
