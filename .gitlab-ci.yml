image: ghcr.io/mojaloop/iac-runner:0.0.1

before_script:
  - "which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )"
  - test -n "$BUCKET"
  - test -n "$TF_VAR_environment"
  - aws s3 sync s3://${BUCKET}/${TF_VAR_environment}/ . --sse || true
  - eval $(ssh-agent -s)
  - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh
  - test -f terraform/ssh_provisioner_key &&  chmod 0600 terraform/ssh_provisioner_key &&  ssh-add terraform/ssh_provisioner_key
  - chmod 755 -R kubespray/
  - chmod +x ./searchandreplace.sh
  - ./searchandreplace.sh
  # Define the contents of the workbench-config file as environment variables for use in gitlab and optionally in terraform
  - for var in $(jq -r 'to_entries[] | "\(.key)=\(.value)\n"' ./workbench-config.json); do export $var; done
  - for var in $(jq -r 'to_entries[] | "TF_VAR_\(.key)=\(.value)\n"' ./workbench-config.json); do export $var; done
  - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'

stages:
  - Validate
  - Destroy
  - "Deploy AWS infrastructure"
  - "Run Kubespray"
  - "Deploy Vault"
  - "Deploy Platform"
  - "Run Tests"
  - "Maintain Platform"

Validate and Plan:
  stage: Validate
  script:
    - cd terraform
    - terraform init -backend-config ${CI_PROJECT_DIR}/backend.hcl
    - terraform validate
    - terraform plan -out=plan.cache
    - terraform show -json plan.cache | jq -r '([.resource_changes[]?.change.actions?]|flatten)|{"create":(map(select(.=="create"))|length),"update":(map(select(.=="update"))|length),"delete":(map(select(.=="delete"))|length)}' > plan.json
  artifacts:
    reports:
      terraform: terraform/plan.json

Destroy AWS:
  stage: Destroy
  script:
    - cd terraform
    - terraform init -backend-config ${CI_PROJECT_DIR}/backend.hcl
    - terraform validate
    - terraform destroy -auto-approve
  when: manual

Destroy Mojaloop K8s Stack:
  stage: Destroy
  script:
    - cd terraform/k8s-setup
    - terraform init -backend-config ${CI_PROJECT_DIR}/backend.hcl
    - terraform validate
    - terraform destroy -auto-approve -var="project_root_path=$CI_PROJECT_DIR"
  when: manual

Destroy Add-On Apps:
  stage: Destroy
  script:
    - cd terraform/k8s-setup/addons
    - terraform init -backend-config ${CI_PROJECT_DIR}/backend.hcl
    - terraform validate
    - terraform destroy -auto-approve -var="project_root_path=$CI_PROJECT_DIR"
  when: manual

Destroy Vault:
  stage: Destroy
  script:
    - cd terraform/k8s-setup/vault
    - terraform init -backend-config ${CI_PROJECT_DIR}/backend.hcl
    - terraform validate
    - terraform destroy -auto-approve -var="aws_secret_key=$AWS_SECRET_ACCESS_KEY" -var="aws_access_key=$AWS_ACCESS_KEY_ID" -var="project_root_path=$CI_PROJECT_DIR"
  when: manual

Destroy Environment:
  stage: Destroy
  script:
    - $CI_PROJECT_DIR/teardown.sh
  when: manual

Destroy SDK:
  stage: Destroy
  script:
    - cd terraform/apps/sdk_vms
    - terraform init -backend-config ${CI_PROJECT_DIR}/backend.hcl
    - terraform validate
    - terraform destroy -auto-approve
  when: manual

Deploy AWS Infrastructure:
  stage: "Deploy AWS infrastructure"
  script:
    - cd terraform
    - terraform init -backend-config ${CI_PROJECT_DIR}/backend.hcl
    - terraform apply -auto-approve
    - aws s3 sync $CI_PROJECT_DIR/kubespray/inventory s3://${BUCKET}/${TF_VAR_environment}/kubespray/inventory/ --sse
    - aws s3 cp $CI_PROJECT_DIR/terraform/ssh_provisioner_key s3://${BUCKET}/${TF_VAR_environment}/terraform/ --sse
    - aws s3 cp extra-vars.json s3://${BUCKET}/${TF_VAR_environment}/extra-vars.json --sse
  when: manual

Create Mojaloop Cluster:
  stage: "Run Kubespray"
  script:
    - aws s3 cp s3://${BUCKET}/${TF_VAR_environment}/extra-vars.json scripts/extra-vars.json --sse
    - chmod 755 scripts/*
    - cd kubespray
    - ../scripts/create-mojaloop-k8-cluster.sh
    - aws s3 cp $CI_PROJECT_DIR/admin-mojaloop.conf s3://${BUCKET}/${TF_VAR_environment}/ --sse
  when: manual

Create Addons Cluster:
  stage: "Run Kubespray"
  script:
    - aws s3 cp s3://${BUCKET}/${TF_VAR_environment}/extra-vars.json scripts/extra-vars.json --sse
    - chmod 755 scripts/*
    - cd kubespray
    - ../scripts/create-add-ons-k8-cluster.sh
    - aws s3 cp $CI_PROJECT_DIR/admin-add-ons.conf s3://${BUCKET}/${TF_VAR_environment}/ --sse
  when: manual

Create Support Services Cluster:
  stage: "Run Kubespray"
  script:
    - aws s3 cp s3://${BUCKET}/${TF_VAR_environment}/extra-vars.json scripts/extra-vars.json --sse
    - chmod 755 scripts/*
    - cd kubespray
    - ../scripts/create-support-services-k8-cluster.sh
    - aws s3 cp $CI_PROJECT_DIR/admin-support-services.conf s3://${BUCKET}/${TF_VAR_environment}/ --sse
  when: manual

Create Gateway Cluster:
  stage: "Run Kubespray"
  script:
    - aws s3 cp s3://${BUCKET}/${TF_VAR_environment}/extra-vars.json scripts/extra-vars.json --sse
    - chmod 755 scripts/*
    - cd kubespray
    - ../scripts/create-wso2-k8-cluster.sh
    - aws s3 cp $CI_PROJECT_DIR/admin-gateway.conf s3://${BUCKET}/${TF_VAR_environment}/ --sse
  when: manual

Deploy Vault:
  stage: "Deploy Vault"
  script:
    - cd terraform/k8s-setup/vault
    - terraform init -backend-config ${CI_PROJECT_DIR}/backend.hcl
    - terraform apply -auto-approve -var="aws_secret_key=$AWS_SECRET_ACCESS_KEY" -var="aws_access_key=$AWS_ACCESS_KEY_ID" -var="project_root_path=$CI_PROJECT_DIR"
    - aws s3 cp $CI_PROJECT_DIR/vault_seal_key s3://${BUCKET}/${TF_VAR_environment}/ --sse
  when: manual

Plan Vault:
  stage: "Deploy Vault"
  script:
    - cd terraform/k8s-setup/vault
    - terraform init -backend-config ${CI_PROJECT_DIR}/backend.hcl
    - terraform plan -var="aws_secret_key=$AWS_SECRET_ACCESS_KEY" -var="aws_access_key=$AWS_ACCESS_KEY_ID" -var="project_root_path=$CI_PROJECT_DIR"
  when: manual

1. Initial Install Base Platform:
  stage: "Deploy Platform"
  script:
    - cd terraform/k8s-setup
    - terraform init -backend-config ${CI_PROJECT_DIR}/backend.hcl
    - terraform apply -auto-approve -var="project_root_path=$CI_PROJECT_DIR"
  when: manual

2. Configure WSO2 External Gateway:
  stage: "Deploy Platform"
  script:
    - chmod o-w terraform/apps/wso2/config/
    - cd terraform/apps/wso2/config/
    - terraform init -backend-config ${CI_PROJECT_DIR}/backend.hcl
    - terraform apply -auto-approve -var="project_root_path=$CI_PROJECT_DIR"
    - ansible-playbook publish.yaml
  when: manual

3. SDK Installation:
  stage: "Deploy Platform"
  script:
    - cd terraform/apps/sdk_vms
    - terraform init -backend-config ${CI_PROJECT_DIR}/backend.hcl
    - terraform apply -auto-approve
    - aws s3 cp $CI_PROJECT_DIR/tf_ssh_priv_key.pem s3://${BUCKET}/${TF_VAR_environment}/standalone-sdk-vm/ --sse || true
    - aws s3 cp $CI_PROJECT_DIR/tf_ssh_pub_key.pem s3://${BUCKET}/${TF_VAR_environment}/standalone-sdk-vm/ --sse || true
  when: manual

4. Install Post Deployment:
  stage: "Deploy Platform"
  script:
    - cd terraform/k8s-setup/addons
    - terraform init -backend-config ${CI_PROJECT_DIR}/backend.hcl
    - terraform apply -auto-approve -var="project_root_path=$CI_PROJECT_DIR"
    - aws s3 sync $CI_PROJECT_DIR/terraform/k8s-setup/addons/secrets_chart s3://${BUCKET}/${TF_VAR_environment}/k8s-cluster/secrets_chart --sse
    - aws s3 sync $CI_PROJECT_DIR/terraform/k8s-setup/addons/sim_tests s3://${BUCKET}/${TF_VAR_environment}/k8s-cluster/sim_tests --sse
    # this may fail if there are no SDKs defined
    - aws s3 sync $CI_PROJECT_DIR/terraform/k8s-setup/addons/sdk_certs s3://${BUCKET}/${TF_VAR_environment}/k8s-cluster/secrets_chart --sse || true
    - find . -type f -iname '*_results' -exec cat '{}' \;
  when: manual

Plan Post Deployment:
  stage: "Deploy Platform"
  script:
    - cd terraform/k8s-setup/addons
    - terraform init -backend-config ${CI_PROJECT_DIR}/backend.hcl
    - terraform state list
    - terraform plan -var="project_root_path=$CI_PROJECT_DIR"
  when: manual

1. Prepare Tests Hub Setup:
  stage: "Run Tests"
  before_script:
    - aws s3 sync s3://${BUCKET}/${TF_VAR_environment}/k8s-cluster/sim_tests/ $CI_PROJECT_DIR/sim_tests --sse
    - aws s3 sync s3://${BUCKET}/${TF_VAR_environment}/k8s-cluster/secrets_chart/ $CI_PROJECT_DIR/secrets_chart --sse
  script:
    - cd sim_tests
    - newman run https://raw.githubusercontent.com/mojaloop/postman/${TAG_ML_GP}/MojaloopHub_Setup.postman_collection.json --ssl-client-cert-list sim_cert_list.json --insecure -e Lab.postman_environment.json
  when: manual

2. Prepare Tests Sims Onboarding:
  stage: "Run Tests"
  before_script:
    - aws s3 sync s3://${BUCKET}/${TF_VAR_environment}/k8s-cluster/sim_tests/ $CI_PROJECT_DIR/sim_tests --sse
    - aws s3 sync s3://${BUCKET}/${TF_VAR_environment}/k8s-cluster/secrets_chart/ $CI_PROJECT_DIR/secrets_chart --sse
  script:
    - cd sim_tests
    - newman run https://raw.githubusercontent.com/mojaloop/postman/${TAG_ML_GP}/MojaloopSims_Onboarding.postman_collection.json --ssl-client-cert-list sim_cert_list.json --insecure -e Lab.postman_environment.json
  when: manual

Prepare Tests PM4ML Sims Onboarding:
  stage: "Run Tests"
  script:
    - aws s3 sync s3://${BUCKET}/${TF_VAR_environment}/k8s-cluster/sim_tests/ $CI_PROJECT_DIR/sim_tests --sse
    - aws s3 sync s3://${BUCKET}/${TF_VAR_environment}/k8s-cluster/secrets_chart/ $CI_PROJECT_DIR/secrets_chart --sse
    - cd sim_tests
    - newman run https://raw.githubusercontent.com/mojaloop/postman/pm4ml/master/MojaloopSims_Onboarding.postman_collection.json --folder pm4mlsenderfsp --folder pm4mlreceiverfsp --ssl-client-cert-list sim_cert_list.json --insecure -e Lab.postman_environment.json
  when: manual

3. Run ML GP Tests:
  stage: "Run Tests"
  before_script:
    - aws s3 sync s3://${BUCKET}/${TF_VAR_environment}/k8s-cluster/sim_tests/ $CI_PROJECT_DIR/sim_tests --sse
    - aws s3 sync s3://${BUCKET}/${TF_VAR_environment}/k8s-cluster/secrets_chart/ $CI_PROJECT_DIR/secrets_chart --sse
    - npm install -g newman-reporter-html
  script:
    - cd sim_tests
    - newman run https://raw.githubusercontent.com/mojaloop/postman/${TAG_ML_GP}/Golden_Path_Mojaloop.postman_collection.json --ssl-client-cert-list sim_cert_list.json --insecure -e Lab.postman_environment.json --reporters html,junit,cli --reporter-html-export report.html --reporter-junit-export report.xml --reporter-html-template ../tests/template-default-colored.hbs -x
  when: manual
  artifacts:
    paths:
      - sim_tests/report.html
    reports:
      junit: sim_tests/report.xml

.addon_pre: &addon_pre
  - cd addons
  - terraform init -backend-config ${CI_PROJECT_DIR}/backend.hcl
.addon_post: &addon_post
  - terraform apply -auto-approve -var="project_root_path=$CI_PROJECT_DIR"
  - aws s3 sync $CI_PROJECT_DIR/terraform/k8s-setup/addons/secrets_chart s3://${BUCKET}/${TF_VAR_environment}/k8s-cluster/secrets_chart --sse
  - aws s3 sync $CI_PROJECT_DIR/terraform/k8s-setup/addons/sim_tests s3://${BUCKET}/${TF_VAR_environment}/k8s-cluster/sim_tests --sse
  - aws s3 sync $CI_PROJECT_DIR/terraform/k8s-setup/addons/sdk_certs s3://${BUCKET}/${TF_VAR_environment}/k8s-cluster/secrets_chart --sse
.refresh_sim_certs: &refresh_sim_certs
  - terraform state list | grep simulators-personal-client | sed 's/"/\\"/g' | xargs -I {} terraform taint {} || true
.refresh_sdk_certs: &refresh_sdk_certs
  - terraform state list | grep sdks-personal-client | sed 's/"/\\"/g' | xargs -I {} terraform taint {} || true
.refresh_fxp_certs: &refresh_fxp_certs
  - terraform state list | grep fxps-personal-client | sed 's/"/\\"/g' | xargs -I {} terraform taint {} || true
.taint_cb_and_addons_haproxies: &taint_cb_and_addons_haproxies
  - terraform taint null_resource.haproxy-wso2-calbacks || true
  - terraform state list | grep haproxy-callback-client-simulators | sed 's/"/\\"/g' | xargs -I {} terraform taint {} || true
  - terraform state list | grep haproxy-callback-client-fxps | sed 's/"/\\"/g' | xargs -I {} terraform taint {} || true
  - terraform state list | grep haproxy-callback-client-sdks | sed 's/"/\\"/g' | xargs -I {} terraform taint {} || true
  - terraform state list | grep deploy-simulators-ca-bundles | sed 's/"/\\"/g' | xargs -I {} terraform taint {} || true
  - terraform state list | grep deploy-fxp-ca-bundles | sed 's/"/\\"/g' | xargs -I {} terraform taint {} || true
  - terraform state list | grep deploy-sdk-ca-bundles | sed 's/"/\\"/g' | xargs -I {} terraform taint {} || true
  - terraform state list | grep deploy_simulators_client_ca_cert_to_addons | sed 's/"/\\"/g' | xargs -I {} terraform taint {} || true
  - terraform state list | grep deploy-simulator-server-certificates | sed 's/"/\\"/g' | xargs -I {} terraform taint {} || true
  - terraform state list | grep deploy-fxp-server-certificates | sed 's/"/\\"/g' | xargs -I {} terraform taint {} || true
  - terraform taint null_resource.deploy-haproxy-addons-cfg || true
  - terraform taint local_file.gp_postman_environment_file || true
  - terraform taint local_file.mojaloop_backend_newman || true
  - terraform taint local_file.gp_postman_certlist_file || true
  - terraform taint local_file.token_env_file || true

Modify Base Platform:
  stage: "Maintain Platform"
  script:
    - cd terraform/k8s-setup
    - terraform init -backend-config ${CI_PROJECT_DIR}/backend.hcl
    - terraform apply -auto-approve -var="project_root_path=$CI_PROJECT_DIR" || true
    - *addon_pre
    - *taint_cb_and_addons_haproxies
    - *addon_post
  when: manual

Renew Callback certificates:
  stage: "Maintain Platform"
  script:
    - cd terraform/k8s-setup
    - *addon_pre
    - *refresh_sim_certs
    - *addon_post
  when: manual

Refresh Whitelist Only:
  stage: "Maintain Platform"
  script:
    - cd terraform/k8s-setup
    - terraform init -backend-config ${CI_PROJECT_DIR}/backend.hcl
    - terraform apply -auto-approve -target vault_generic_secret.whitelist_vpn -target=vault_generic_secret.whitelist_gateway -target=vault_generic_secret.whitelist_mojaloop -target=vault_generic_secret.whitelist_addons -target=vault_generic_secret.whitelist_fsp -target=vault_generic_secret.whitelist_vpn -target=vault_generic_secret.whitelist_nat  -var="project_root_path=$CI_PROJECT_DIR"
  when: manual

Refresh Test Files Only:
  stage: "Maintain Platform"
  script:
    - cd terraform/k8s-setup
    - *addon_pre
    - terraform taint local_file.gp_postman_environment_file || true
    - terraform taint local_file.mojaloop_backend_newman || true
    - terraform taint local_file.gp_postman_certlist_file || true
    - terraform taint local_file.token_env_file || true
    - terraform apply -auto-approve -target=local_file.gp_postman_environment_file -target=local_file.mojaloop_backend_newman -target=local_file.gp_postman_certlist_file -target=local_file.token_env_file -var="project_root_path=$CI_PROJECT_DIR"
    - *addon_post
  when: manual

Plan Initial Install Base Platform:
  stage: "Deploy Platform"
  script:
    - cd terraform/k8s-setup
    - terraform init -backend-config ${CI_PROJECT_DIR}/backend.hcl
    - terraform state list
    - terraform plan -var="project_root_path=$CI_PROJECT_DIR"
  when: manual
